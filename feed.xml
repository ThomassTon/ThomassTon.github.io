<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://thomasston.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://thomasston.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-16T11:47:40+00:00</updated><id>https://thomasston.github.io/feed.xml</id><title type="html">Haolei’s Pit</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Multi-Robot Pick and Place</title><link href="https://thomasston.github.io/blog/2024/irobmanlab_blog/" rel="alternate" type="text/html" title="Multi-Robot Pick and Place"/><published>2024-09-05T00:00:00+00:00</published><updated>2024-09-05T00:00:00+00:00</updated><id>https://thomasston.github.io/blog/2024/irobmanlab_blog</id><content type="html" xml:base="https://thomasston.github.io/blog/2024/irobmanlab_blog/"><![CDATA[<p>For this project, we need to implement the simultaneous manipulation of two objects using two Franka robotic arms in a simulation environment. The project utilizes the KOMO optimizer and bi-RRT for planning the motion paths of the robotic arms.</p> <p><strong>k-order Markov Optimization</strong> is a method used in decision-making processes where the current decision depends not just on the immediate previous state (as in a first-order Markov process) but on a sequence of previous states, up to k steps in the past:</p> \[\min_{x_{0:T}} \sum_{t=0}^{T} f_t(x_{t-k:t})^\top f_t(x_{t-k:t}) + \sum_{t,t'} k(t,t') x_t^\top x_{t'}\] \[\text{s.t.} \quad \forall t : g_t(x_{t-k:t}) \leq 0, \quad h_t(x_{t-k:t}) = 0.\] <p>where \(x_{t-k:t} = (x_{t-k},..., x_{t-1}, x_{t})\) are \(k+1\) tuples of consecutive states. And the the term \(k(t,t^{'})\) is an optional kernel measuring the desired correlation between time steps \(t\) and \(t^{'}\), which we explored but in practice hardly used.</p> <p>To compute the inverse kinematics of a robotic arm, we typically need to define the following parameters:</p> \[\begin{aligned} q &amp;\in \mathbb{R}^n &amp;\text{vector of joint angles (robot configuration)} \\ \dot{q} &amp;\in \mathbb{R}^n &amp;\text{vector of joint angular velocities} \\ \phi : q &amp;\mapsto y \in \mathbb{R}^d &amp;\text{feature (or forward kinematic)} \text{e.g. position} \in \mathbb{R}^3 \text{ or vector} \in \mathbb{R}^3 \\ J(q) &amp;= \frac{\partial \phi}{\partial q} \in \mathbb{R}^{d \times n} &amp;\text{Jacobian} \end{aligned}\] <p>To apply KOMO (K-order Markov Optimization) to inverse kinematics with \(k=2\):</p> \[\begin{aligned} J_{\text{pos}} &amp;= \sum_{t=1}^{T} \| \mathbf{y}_t^{\text{desired}} - \mathbf{y}_t(\mathbf{q}_t) \|^2 &amp;\text{Error of the end effector} \\ J_{\text{smooth}} &amp;= \sum_{t=3}^{T} \left( \lambda_1 \| \theta_t - \theta_{t-1} \|^2 + \lambda_2 \| \theta_t - 2\theta_{t-1} + \theta_{t-2} \|^2 \right) &amp;\text{Smoothness Constraint}\\ \end{aligned}\] <p>Specifically:</p> <p>\(\lambda_{1}\) controls the first-order smoothness (to prevent excessive changes in joint angles between consecutive time steps).</p> <p>\(\lambda_{2}\) controls second-order smoothness (to avoid abrupt changes in acceleration or angular velocity).</p> <p>\(\theta_{t} - 2\theta_{t-1} + \theta_{t-2}\) approximately describes the change in acceleration of the joint angles.</p> <p>The final total cost function is:</p> \[\begin{aligned} J &amp;= J_{pos} + J_{smooth} + \text{other constraint terms} \end{aligned}\] <p>We need to minimize this objective function \(J\), .i.e,</p> \[\min_{\theta_{t}, \theta_{t-1}, \theta_{t-2}} J\] <p><strong>Bi-directional Rapidly-exploring Random Tree (Bi-RRT)</strong> is an enhanced version of the Rapidly-exploring Random Tree (RRT) algorithm. Unlike the standard RRT, which grows a single tree from the start to explore the space, Bi-RRT grows two trees simultaneously,i.e., One tree starts from the initial position of the robot, the other tree starts from the goal position. Both trees expand alternately by randomly sampling points in the space and attempting to extend the trees towards those points. Once the two trees are connected, a valid path is formed that goes from the start, through the nodes of the first tree, to the connecting point, and then through the nodes of the second tree to the goal.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/rrt_img-480.webp 480w,/assets/img/rrt_img-800.webp 800w,/assets/img/rrt_img-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/rrt_img.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><strong>Setting up the simulation environment:</strong></p> <p>Typically, we need to configure the initial position of the objects to be grasped, the target positions, and also the placement of the robotic arms.</p> <p>For the <strong>objects</strong> to be grasped, we need to define the coordinates and the rotational angles using quaternions. For the initial position, “contact” should be set to 1 for collision detection, while for the target position, it should be set to 0.</p> <pre><code class="language-PHP">goal1 (bin1){ joint:rigid type:ssBox, size:[0.1 0.1 0.1 .01], contact:0 Q:&lt;[  0, 0.0, 0.13, 1., 0., .0, 0]&gt; color:[0.4, 1, 1, 0.2]}
goal2 (bin1){ joint:rigid type:ssBox, size:[0.1 0.1 0.1 .01], contact:0 Q:&lt;[  0, 0.0, 0.23, 1., 0., .0, 0]&gt; color:[0.4, 1, 1, 0.2]}
goal3 (bin2){ joint:rigid type:ssBox, size:[0.20 0.20 0.1 .01], contact:0 Q:&lt;[  0, 0.05, 0.03, 1., 0., .0, 0]&gt; color:[0.4, 1, 1, 0.2]}

obj3 (bin1){ joint:rigid type:ssBox, size:[0.20 0.20 0.1 .01], contact:1 Q:&lt;[ 0, -0., 0.03, 1, 0, .0, 0]&gt; color:[0.4, 1, 1, 1]}
obj2 (bin2){ joint:rigid type:ssBox, size:[0.1 0.1 0.1 .01], contact:1 Q:&lt;[  -0., -0.15, 0.03, 1, 0, .0, 0]&gt; color:[0.4, 1, 1, 1]}
obj1 (bin2){ joint:rigid type:ssBox, size:[0.1 0.1 0.1 .01], contact:1 Q:&lt;[  -0., -0.01, 0.03, 1, 0, .0, 0]&gt; color:[0.4, 1, 1, 1]}
</code></pre> <p>For the robotic arms, we need to configure their placement positions as well as the initial position of each joint. Typically, the distance between the two arms should be set large enough to avoid joint collisions when grasping the same object.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">const</span> <span class="n">arrA</span> <span class="n">basePos</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="o">-</span><span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.00</span><span class="p">},</span>
    <span class="p">{</span><span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">}</span>
<span class="p">};</span>

<span class="k">const</span> <span class="n">arrA</span> <span class="n">baseQuat</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
    <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="mf">0.924</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.383</span><span class="p">},</span>
    <span class="p">{</span><span class="o">-</span><span class="mf">0.383</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.924</span><span class="p">},</span>
<span class="p">};</span>

<span class="k">for</span> <span class="p">(</span><span class="n">uint</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">auto</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="n">addFile</span><span class="p">(</span><span class="s">"./in/franka.g"</span><span class="p">);</span>
    <span class="n">C</span><span class="p">.</span><span class="n">reconfigureRoot</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
    <span class="n">a</span><span class="o">-&gt;</span><span class="n">linkFrom</span><span class="p">(</span><span class="n">C</span><span class="p">[</span><span class="s">"table"</span><span class="p">]);</span>
    <span class="k">const</span> <span class="n">rai</span><span class="o">::</span><span class="n">String</span> <span class="n">prefix</span> <span class="o">=</span> <span class="n">STRING</span><span class="p">(</span><span class="sc">'a'</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="sc">'_'</span><span class="p">);</span>
    <span class="n">a</span><span class="o">-&gt;</span><span class="n">prefixSubtree</span><span class="p">(</span><span class="n">prefix</span><span class="p">);</span>
    <span class="k">const</span> <span class="n">rai</span><span class="o">::</span><span class="n">String</span> <span class="n">agentBase</span> <span class="o">=</span> <span class="n">STRING</span><span class="p">(</span><span class="n">prefix</span> <span class="o">&lt;&lt;</span> <span class="s">"base"</span><span class="p">);</span>
    <span class="n">C</span><span class="p">[</span><span class="n">agentBase</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">setRelativePosition</span><span class="p">(</span><span class="n">basePos</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
    <span class="n">C</span><span class="p">[</span><span class="n">agentBase</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">setQuaternion</span><span class="p">(</span><span class="n">baseQuat</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
    <span class="n">setActive</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">prefix</span><span class="p">.</span><span class="n">p</span><span class="p">));</span>
    <span class="n">arr</span> <span class="n">state</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="n">getJointState</span><span class="p">();</span>
    <span class="n">C</span><span class="p">.</span><span class="n">setJointState</span><span class="p">(</span><span class="n">state</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>In the <strong>task plan</strong>, since this project involves two robotic arms completing a task simultaneously, there is no need to account for the Traveling Salesman Problem. The tasks can simply be assigned in sequence, i.e., {task_{1}(robot_{1}, robot_{2}), task_{2}(robot_{1}, robot_{2})}.</p> <p>Here, a task represents the movement of a robotic arm from position A to position B. For example, moving the arm from the initial position to the position where it can grasp an object constitutes a task. The content of the task is determined by the joint configurations that correspond to the target positions of the robot’s end effector.</p> <p>In this project, we use the <strong>KOMO</strong> optimizer to solve the inverse kinematics:</p> <p>We can configure the optimizer using the skeleton framework: {1., 1., SY_touch, {pen_tip_0, obj}}: <strong>‘1.’</strong> represents the timestep, <strong>‘SY_touch’</strong> indicates contact with the target, can be replaced with other types of constraints, such as <strong>SY_stable</strong>, which indicates being stationary relative to the target, <strong>‘pen_tip’</strong> represents the robot’s end-effector, <strong>‘obj’</strong> represents the target.</p> <p>Additionally, we can use <strong>addObjective</strong> to add extra constraints, such as ensuring the distance between the end-effector and the object is zero, or enforcing that the end-effector remains perpendicular to the object’s surface.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">Skeleton</span> <span class="n">S</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="mf">1.</span><span class="p">,</span> <span class="mf">1.</span><span class="p">,</span> <span class="n">SY_touch</span><span class="p">,</span> <span class="p">{</span><span class="n">pen_tip_0</span><span class="p">,</span> <span class="n">obj</span><span class="p">}},</span>
    <span class="p">{</span><span class="mf">1.</span><span class="p">,</span> <span class="mf">1.</span><span class="p">,</span> <span class="n">SY_touch</span><span class="p">,</span> <span class="p">{</span><span class="n">pen_tip_1</span><span class="p">,</span> <span class="n">obj</span><span class="p">}},</span>
    <span class="p">{</span><span class="mf">1.</span><span class="p">,</span> <span class="mf">2.</span><span class="p">,</span> <span class="n">SY_stable</span><span class="p">,</span> <span class="p">{</span><span class="n">pen_tip_0</span><span class="p">,</span> <span class="n">obj</span><span class="p">}},</span>
    <span class="p">{</span><span class="mf">1.</span><span class="p">,</span> <span class="mf">2.</span><span class="p">,</span> <span class="n">SY_stable</span><span class="p">,</span> <span class="p">{</span><span class="n">pen_tip_1</span><span class="p">,</span> <span class="n">obj</span><span class="p">}},</span>
    <span class="p">{</span><span class="mf">2.</span><span class="p">,</span> <span class="mf">2.</span><span class="p">,</span> <span class="n">SY_poseEq</span><span class="p">,</span> <span class="p">{</span><span class="n">obj</span><span class="p">,</span> <span class="n">goal</span><span class="p">}},</span>
<span class="p">};</span>
<span class="n">komo</span><span class="p">.</span><span class="n">setSkeleton</span><span class="p">(</span><span class="n">S</span><span class="p">);</span>
<span class="c1">// komo.addObjective({1.}, FS_vectorZ, {STRING(robots[0] &lt;&lt; "pen")}, OT_sos, {1e1}, {0., 0., -1.});</span>
<span class="n">komo</span><span class="p">.</span><span class="n">addObjective</span><span class="p">({</span><span class="mf">1.</span><span class="p">,</span><span class="mf">1.</span><span class="p">},</span> <span class="n">FS_distance</span><span class="p">,</span> <span class="p">{</span><span class="n">obj</span><span class="p">,</span> <span class="n">STRING</span><span class="p">(</span><span class="n">robots</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"pen_tip"</span><span class="p">)},</span> <span class="n">OT_ineq</span><span class="p">,</span> <span class="p">{</span><span class="mf">1e1</span><span class="p">},{</span><span class="o">-</span><span class="mf">0.0</span><span class="p">});</span> 
<span class="n">komo</span><span class="p">.</span><span class="n">addObjective</span><span class="p">({</span><span class="mf">1.</span><span class="p">,</span><span class="mf">1.</span><span class="p">},</span> <span class="n">FS_distance</span><span class="p">,</span> <span class="p">{</span><span class="n">obj</span><span class="p">,</span> <span class="n">STRING</span><span class="p">(</span><span class="n">robots</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"pen_tip"</span><span class="p">)},</span> <span class="n">OT_ineq</span><span class="p">,</span> <span class="p">{</span><span class="mf">1e1</span><span class="p">},{</span><span class="o">-</span><span class="mf">0.0</span><span class="p">});</span> 
</code></pre></div></div> <p><strong>Path planning</strong> is implemented using two methods: one based on the KOMO optimizer, and the other using bi-RRT.</p> <p>The <strong>KOMO optimizer</strong> solves the problem by using the provided initial and target positions, while setting velocity and acceleration constraints.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">OptOptions</span> <span class="n">options</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">stopIters</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>  <span class="c1">// Set the maximum number of iterations.</span>
<span class="n">options</span><span class="p">.</span><span class="n">damping</span> <span class="o">=</span> <span class="mf">1e-3</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">stopLineSteps</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="n">komo</span><span class="p">.</span><span class="n">setConfiguration</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="n">q0</span><span class="p">);</span> <span class="c1">// By configuring KOMO for second-order optimization, it preserves position information from time step t-2 to t.</span>
<span class="n">komo</span><span class="p">.</span><span class="n">setConfiguration</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">q0</span><span class="p">);</span>
<span class="n">komo</span><span class="p">.</span><span class="n">setConfiguration</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">q0</span><span class="p">);</span> 
<span class="n">komo</span><span class="p">.</span><span class="n">add_collision</span><span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="mf">.001</span><span class="p">,</span> <span class="mf">1e1</span><span class="p">);</span>  <span class="c1">//set collision detection</span>
<span class="n">komo</span><span class="p">.</span><span class="n">addObjective</span><span class="p">({</span><span class="mi">1</span><span class="p">},</span> <span class="n">FS_qItself</span><span class="p">,</span> <span class="p">{},</span> <span class="n">OT_eq</span><span class="p">,</span> <span class="p">{</span><span class="mf">1e2</span><span class="p">},</span> <span class="n">q1</span><span class="p">);</span> <span class="c1">// set goal position q1</span>
<span class="n">komo</span><span class="p">.</span><span class="n">addObjective</span><span class="p">({</span><span class="mf">0.95</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">},</span> <span class="n">FS_qItself</span><span class="p">,</span> <span class="p">{},</span> <span class="n">OT_eq</span><span class="p">,</span> <span class="p">{</span><span class="mf">1e1</span><span class="p">},</span> <span class="p">{},</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// speed slow at end</span>
<span class="n">komo</span><span class="p">.</span><span class="n">addObjective</span><span class="p">({</span><span class="mf">0.95</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">},</span> <span class="n">FS_qItself</span><span class="p">,</span> <span class="p">{},</span> <span class="n">OT_eq</span><span class="p">,</span> <span class="p">{</span><span class="mf">1e1</span><span class="p">},</span> <span class="p">{},</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// acceleration slow at end</span>

<span class="n">komo</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">options</span><span class="p">);</span>
<span class="c1">// get the path from KOMO</span>
<span class="n">arr</span> <span class="nf">path</span><span class="p">(</span><span class="n">ts</span><span class="p">.</span><span class="n">N</span><span class="p">,</span> <span class="n">q0</span><span class="p">.</span><span class="n">N</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="n">uint</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">ts</span><span class="p">.</span><span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
<span class="n">path</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">komo</span><span class="p">.</span><span class="n">getPath_q</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
<span class="p">};</span>

</code></pre></div></div> <p>The RRT path planner generates the path based on the initial and target positions provided by the KOMO optimizer.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TaskPart</span> <span class="n">rrt_path</span> <span class="o">=</span> <span class="n">plan_in_animation_rrt</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">t0</span><span class="p">,</span> <span class="n">q0</span><span class="p">,</span> <span class="n">q1</span><span class="p">,</span> <span class="n">time_lb</span><span class="p">,</span> <span class="n">prefix</span><span class="p">);</span> <span class="c1">// q0 is start configuration of joints, qi is goal configuration of joints</span>
</code></pre></div></div> <p>By using these two planners, a robot-arm’s movement path can be obtained in a straightforward and efficient manner.</p> <p>However, because the simulation framework defines object connections based on a tree structure where each node can only have one parent and one child, this restricts each object to being linked to only one end-effector at a time. For example, place the object on the table,</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">to</span> <span class="o">=</span> <span class="n">CPlanner</span><span class="p">[</span><span class="n">obj</span><span class="p">];</span>
<span class="k">auto</span> <span class="n">from</span> <span class="o">=</span> <span class="n">CPlanner</span><span class="p">[</span><span class="s">"table_base"</span><span class="p">];</span>
<span class="n">to</span><span class="o">-&gt;</span><span class="n">unLink</span><span class="p">();</span>
<span class="n">to</span><span class="o">-&gt;</span><span class="n">linkFrom</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</code></pre></div></div> <p>Therefore, our solution is to use the target positions generated by the KOMO optimizer to determine the relative positions of the two robotic arms, and let second arm perform as pseudo-grasp.</p> \[\begin{aligned} ^{w}P = ^{w}r_{r1} + ^{w}R_{r1}\ ^{r1}P \end{aligned}\] <p>Let \(^{r1}P\) represent the relative displacement between two end effectors. By obtaining the coordinates \(^{w}r_{r1}\) and rotation matrix \(^{w}R_{r1}\) of the first end effector, we can determine the coordinates of the second end effector \(^{w}P\).</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/transformation-480.webp 480w,/assets/img/transformation-800.webp 800w,/assets/img/transformation-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/transformation.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span> <span class="c1">// get the grasp position of robot 1</span>
    <span class="n">to</span><span class="o">-&gt;</span><span class="n">unLink</span><span class="p">();</span>
    <span class="n">to</span><span class="o">-&gt;</span><span class="n">linkFrom</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
    <span class="n">r0_b</span> <span class="o">=</span>  <span class="n">CPlanner</span><span class="p">[</span><span class="n">pen_tip</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">();</span>
    <span class="n">rotationmantix</span> <span class="o">=</span> <span class="n">CPlanner</span><span class="p">[</span><span class="n">pen_tip</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getRotationMatrix</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span> <span class="c1">// get the grasp position of robot 2</span>
    <span class="n">r0_1</span> <span class="o">=</span> <span class="n">get_r_0_1</span><span class="p">(</span><span class="n">r0_b</span><span class="p">,</span><span class="n">rotationmantix</span><span class="p">,</span> <span class="n">CPlanner</span><span class="p">[</span><span class="n">pen_tip</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span> <span class="c1">// obtain the relative positions</span>
    <span class="p">}</span>

</code></pre></div></div> <p>Once the relative positions of the two end-effectors are determined, we can calculate the position of the second end-effector based on the path of the first one. Then, by using KOMO to compute the inverse kinematics, we obtain the angles for each joint.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">uint</span> <span class="n">size_of_path</span> <span class="o">=</span>  <span class="n">paths</span><span class="p">[</span><span class="n">sequence</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">first</span><span class="p">].</span><span class="n">back</span><span class="p">().</span><span class="n">path</span><span class="p">.</span><span class="n">N</span> <span class="o">/</span><span class="mi">7</span><span class="p">;</span>   <span class="c1">// het the size of path from first robot</span>
<span class="n">arr</span> <span class="n">t_a1</span><span class="p">;</span>
<span class="n">arr</span> <span class="nf">path_a1</span><span class="p">(</span><span class="mi">0u</span><span class="p">,</span><span class="n">paths</span><span class="p">[</span><span class="n">sequence</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">first</span><span class="p">].</span><span class="n">back</span><span class="p">().</span><span class="n">path</span><span class="p">.</span><span class="n">d1</span><span class="p">);</span>   <span class="c1">// define the path for second robot</span>
<span class="n">CPlanner</span><span class="p">.</span><span class="n">setJointState</span><span class="p">(</span><span class="n">paths</span><span class="p">[</span><span class="n">robot</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">path</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
<span class="k">for</span><span class="p">(</span><span class="n">uint</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size_of_path</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">auto</span> <span class="n">r0b</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">sequence</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">first</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="n">path</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">auto</span> <span class="n">t</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">sequence</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">first</span><span class="p">].</span><span class="n">back</span><span class="p">().</span><span class="n">t</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="n">CTest</span><span class="p">.</span><span class="n">setJointState</span><span class="p">(</span><span class="n">r0b</span><span class="p">);</span>
    <span class="k">const</span> <span class="k">auto</span> <span class="n">pen_tip</span> <span class="o">=</span>  <span class="n">STRING</span><span class="p">(</span><span class="n">sequence</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="s">"pen_tip"</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">_r0_b</span> <span class="o">=</span> <span class="n">CTest</span><span class="p">[</span><span class="n">pen_tip</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">();</span>
    <span class="k">auto</span> <span class="n">rotationmatrix</span> <span class="o">=</span> <span class="n">CTest</span><span class="p">[</span><span class="n">pen_tip</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getRotationMatrix</span><span class="p">();</span>
    <span class="k">auto</span> <span class="n">_goal_pose</span> <span class="o">=</span> <span class="n">get_trans_position</span><span class="p">(</span><span class="n">_r0_b</span><span class="p">,</span><span class="n">rotationmatrix</span><span class="p">,</span><span class="n">r0_1</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">goal_pose_</span><span class="o">=</span> <span class="n">get_position</span><span class="p">(</span><span class="n">CPlanner</span><span class="p">,</span><span class="n">robot</span><span class="p">,</span><span class="n">_goal_pose</span><span class="p">);</span>     <span class="c1">// use KOMO to compute the inverse kinematics</span>
    <span class="n">CPlanner</span><span class="p">.</span><span class="n">setJointState</span><span class="p">(</span><span class="n">goal_pose_</span><span class="p">);</span>
    <span class="n">t_a1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
    <span class="n">path_a1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">goal_pose_</span><span class="p">);</span>

<span class="p">}</span>
<span class="n">TaskPart</span> <span class="nf">path_</span><span class="p">(</span><span class="n">t_a1</span><span class="p">,</span><span class="n">path_a1</span><span class="p">);</span>
<span class="n">path_</span><span class="p">.</span><span class="n">has_solution</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</code></pre></div></div> <h2 id="result">Result</h2> <p>In our tests, we found that when both RRT and KOMO can find a path, the path generated by KOMO is usually shorter,</p> <table> <thead> <tr> <th>Method</th> <th>path1</th> <th>path2</th> <th>path3</th> <th>path4</th> </tr> </thead> <tbody> <tr> <td>KOMO</td> <td>30</td> <td>111</td> <td>153</td> <td>182</td> </tr> <tr> <td>RRT</td> <td>31</td> <td>136</td> <td>171</td> <td>185</td> </tr> </tbody> </table> <p>In the animation below, the left side shows the path generated by KOMO, while the right side shows the path generated by RRT. We can observe that the path generated by KOMO is faster than the one generated by RRT.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/blog1.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/blog2.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <p>In addition, we also tested the obstacle avoidance functionality of this path planner and found that it effectively avoids obstacles during path planning. Below are some of our simulation test videos.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/stacking_co_3.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/cooperation_4.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <h2 id="conclusion">Conclusion</h2> <p>The KOMO solver can efficiently compute inverse solutions and plan paths, but there are still some scenarios where it fails to find a valid solution. Additionally, while our method allows both robotic arms to grasp an object simultaneously, the second arm is performing a pseudo-grasp, which causes rotation between the end-effector and the object during movement. This aspect can be improved in future work.</p>]]></content><author><name></name></author><category term="lab"/><category term="project"/><summary type="html"><![CDATA[For this project, we need to implement the simultaneous manipulation of two objects using two Franka robotic arms in a simulation environment. The project utilizes the KOMO optimizer and bi-RRT for planning the motion paths of the robotic arms.]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://thomasston.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://thomasston.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://thomasston.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://thomasston.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://thomasston.github.io/blog/2024/tabs</id><content type="html" xml:base="https://thomasston.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="eff4e723-0edc-4023-831b-67e55de66bac" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="eff4e723-0edc-4023-831b-67e55de66bac" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="941287d7-8586-4dda-b487-89c5fb234139" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="941287d7-8586-4dda-b487-89c5fb234139" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="4af0413c-a8a0-4e19-91e2-6b563c4c58c4" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="4af0413c-a8a0-4e19-91e2-6b563c4c58c4" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://thomasston.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://thomasston.github.io/blog/2024/typograms</id><content type="html" xml:base="https://thomasston.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://thomasston.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://thomasston.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://thomasston.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://thomasston.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://thomasston.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://thomasston.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://thomasston.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://thomasston.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://thomasston.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://thomasston.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://thomasston.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://thomasston.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry><entry><title type="html">a post with vega lite</title><link href="https://thomasston.github.io/blog/2024/vega-lite/" rel="alternate" type="text/html" title="a post with vega lite"/><published>2024-01-27T00:20:00+00:00</published><updated>2024-01-27T00:20:00+00:00</updated><id>https://thomasston.github.io/blog/2024/vega-lite</id><content type="html" xml:base="https://thomasston.github.io/blog/2024/vega-lite/"><![CDATA[<p>This is an example post with some <a href="https://vega.github.io/vega-lite/">vega lite</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included vega lite code could look like]]></summary></entry><entry><title type="html">a post with geojson</title><link href="https://thomasston.github.io/blog/2024/geojson-map/" rel="alternate" type="text/html" title="a post with geojson"/><published>2024-01-26T17:57:00+00:00</published><updated>2024-01-26T17:57:00+00:00</updated><id>https://thomasston.github.io/blog/2024/geojson-map</id><content type="html" xml:base="https://thomasston.github.io/blog/2024/geojson-map/"><![CDATA[<p>This is an example post with some <a href="https://geojson.org/">geojson</a> code. The support is provided thanks to <a href="https://leafletjs.com/">Leaflet</a>. To create your own visualization, go to <a href="https://geojson.io/">geojson.io</a>.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">geojson
</span><span class="sb">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-geojson">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><category term="maps"/><summary type="html"><![CDATA[this is what included geojson code could look like]]></summary></entry></feed>